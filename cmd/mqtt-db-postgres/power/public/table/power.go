//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Power = newPowerTable()

type powerTable struct {
	postgres.Table

	//Columns
	Modtime postgres.ColumnTimestamp
	Solar   postgres.ColumnInteger
	Total   postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PowerTable struct {
	powerTable

	EXCLUDED powerTable
}

// AS creates new PowerTable with assigned alias
func (a *PowerTable) AS(alias string) *PowerTable {
	aliasTable := newPowerTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newPowerTable() *PowerTable {
	return &PowerTable{
		powerTable: newPowerTableImpl("public", "power"),
		EXCLUDED:   newPowerTableImpl("", "excluded"),
	}
}

func newPowerTableImpl(schemaName, tableName string) powerTable {
	var (
		ModtimeColumn  = postgres.TimestampColumn("modtime")
		SolarColumn    = postgres.IntegerColumn("solar")
		TotalColumn    = postgres.IntegerColumn("total")
		allColumns     = postgres.ColumnList{ModtimeColumn, SolarColumn, TotalColumn}
		mutableColumns = postgres.ColumnList{SolarColumn, TotalColumn}
	)

	return powerTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		Modtime: ModtimeColumn,
		Solar:   SolarColumn,
		Total:   TotalColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
